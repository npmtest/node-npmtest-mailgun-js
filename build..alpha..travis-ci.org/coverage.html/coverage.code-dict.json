{"/home/travis/build/npmtest/node-npmtest-mailgun-js/test.js":"/* istanbul instrument in package npmtest_mailgun_js */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-mailgun-js/lib.npmtest_mailgun_js.js":"/* istanbul instrument in package npmtest_mailgun_js */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_mailgun_js = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_mailgun_js = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-mailgun-js/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-mailgun-js && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_mailgun_js */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_mailgun_js\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught.stack);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_mailgun_js.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_mailgun_js.rollup.js'] =\n            local.assetsDict['/assets.npmtest_mailgun_js.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_mailgun_js.__dirname +\n                    '/lib.npmtest_mailgun_js.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-mailgun-js/mailgun-js/lib/mailgun.js":"var tsscmp = require('tsscmp');\nvar crypto = require('crypto');\n\nvar Attachment = require('./attachment');\nvar Request = require('./request');\nvar builder = require('./build');\nvar resources = require('./schema').definitions;\n\nvar mailgunExpirey = 15 * 60 * 1000;\nvar mailgunHashType = 'sha256';\nvar mailgunSignatureEncoding = 'hex';\n\nvar Mailgun = function (options) {\n  if(!options.apiKey){\n    throw new Error('apiKey value must be defined!'); \n  }\n  this.username = 'api';\n  this.apiKey = options.apiKey;\n  this.publicApiKey = options.publicApiKey;\n  this.domain = options.domain;\n  this.auth = [this.username, this.apiKey].join(':');\n  this.mute = options.mute || false;\n  this.timeout = options.timeout;\n\n  this.host = options.host || 'api.mailgun.net';\n  this.endpoint = options.endpoint || '/v3';\n  this.protocol = options.protocol || 'https:';\n  this.port = options.port || 443;\n  this.retry = options.retry || 1;\n\n  if (options.proxy) {\n    this.proxy = options.proxy;\n  }\n\n  this.options = {\n    host: this.host,\n    endpoint: this.endpoint,\n    protocol: this.protocol,\n    port: this.port,\n    auth: this.auth,\n    proxy: this.proxy,\n    timeout: this.timeout,\n    retry: this.retry\n  };\n\n  this.mailgunTokens = {};\n};\n\nMailgun.prototype.getDomain = function (method, resource) {\n  var d = this.domain;\n\n  //filter out API calls that do not require a domain specified\n  if ((resource.indexOf('/routes') >= 0)\n    || (resource.indexOf('/lists') >= 0)\n    || (resource.indexOf('/address') >= 0)\n    || (resource.indexOf('/domains') >= 0 )) {\n    d = '';\n  }\n  else if ((resource.indexOf('/messages') >= 0)\n    && (method === 'GET' || method === 'DELETE')) {\n    d = 'domains/' + this.domain;\n  }\n\n  return d;\n};\n\nMailgun.prototype.getRequestOptions = function (resource) {\n  var o = this.options;\n\n  // use public API key if we have it for the routes that require it\n  if (resource.indexOf('/address') >= 0 && this.publicApiKey) {\n    var copy = Object.assign({}, this.options);\n    copy.auth = [this.username, this.publicApiKey].join(':');\n    o = copy;\n  }\n \n  return o;\n};\n\nMailgun.prototype.request = function (method, resource, data, fn) {\n  var fullpath = resource;\n  var domain = this.getDomain(method, resource);\n  if (domain) {\n    fullpath = '/'.concat(domain, resource);\n  }\n\n  var req = new Request(this.options);\n  return req.request(method, fullpath, data, fn);\n};\n\nMailgun.prototype.post = function (path, data, fn) {\n  var req = new Request(this.options);\n  return req.request('POST', path, data, fn);\n};\n\nMailgun.prototype.get = function (path, data, fn) {\n  var req = new Request(this.options);\n  return req.request('GET', path, data, fn);\n};\n\nMailgun.prototype.delete = function (path, data, fn) {\n  var req = new Request(this.options);\n  return req.request('DELETE', path, data, fn);\n};\n\nMailgun.prototype.put = function (path, data, fn) {\n  var req = new Request(this.options);\n  return req.request('PUT', path, data, fn);\n};\n\n\nMailgun.prototype.validateWebhook = function (timestamp, token, signature) {\n  var self = this;\n\n  var adjustedTimestamp = parseInt(timestamp, 10) * 1000;\n  var fresh = (Math.abs(Date.now() - adjustedTimestamp) < mailgunExpirey);\n\n  if (!fresh) {\n    if (!this.mute) {\n      console.error('[mailgun] Stale Timestamp: this may be an attack');\n      console.error('[mailgun] However, this is most likely your fault\\n');\n      console.error('[mailgun] run `ntpdate ntp.ubuntu.com` and check your system clock\\n');\n      console.error('[mailgun] System Time: ' + new Date().toString());\n      console.error('[mailgun] Mailgun Time: ' + new Date(adjustedTimestamp).toString(), timestamp);\n      console.error('[mailgun] Delta: ' + (Date.now() - adjustedTimestamp));\n    }\n    return false;\n  }\n\n  if (this.mailgunTokens[token]) {\n    if (!this.mute) {\n      console.error('[mailgun] Replay Attack');\n    }\n    return false;\n  }\n\n  this.mailgunTokens[token] = true;\n\n  setTimeout(function () {\n    delete self.mailgunTokens[token];\n  }, mailgunExpirey + (5 * 1000));\n\n  return tsscmp(\n    signature\n    , crypto.createHmac(mailgunHashType, self.apiKey)\n      .update(new Buffer(timestamp + token, 'utf-8'))\n      .digest(mailgunSignatureEncoding)\n  );\n};\n\nMailgun.prototype.validate = function (address, fn) {\n  var resource = `/address/validate`;\n  var options = this.getRequestOptions(resource);\n\n  var req = new Request(options);\n  return req.request('GET', resource, { address }, fn);\n};\n\nMailgun.prototype.parse = function (addresses, fn) {\n  var resource = `/address/parse`;\n  var options = this.getRequestOptions(resource);\n\n  var req = new Request(options);\n  return req.request('GET', resource, { addresses }, fn);\n};\n\nbuilder.build(Mailgun, resources);\n\nMailgun.prototype.Attachment = Attachment;\n\nMailgun.prototype.Mailgun = Mailgun;\n\nmodule.exports = function (options) {\n  return new Mailgun(options);\n};\n","/home/travis/build/npmtest/node-npmtest-mailgun-js/mailgun-js/lib/attachment.js":"var isStream = require('is-stream');\n\n/**\n * Creates an Attachment object.\n * @param options Buffer representing attachment data\n *                data  - one of:\n *                      - string representing the full file path\n *                      - buffer of the data\n *                      - readable interface (stream)\n *                filename - optionally the filename to be used for the attachment, should be used if passing\n *                           buffer or stream in the data param\n *                contentType - the content type for header info. Should be passed in if using stream for data\n *                knownLength - the known length of the data. Should be passed in if using stream for data\n * @constructor\n */\nvar Attachment = module.exports = function Attachment(options) {\n  var data = options.data;\n\n  if (data) {\n    if (typeof data === 'string' || Buffer.isBuffer(data) || isStream(data)) {\n      this.data = data;\n    }\n  }\n\n  this.filename = options.filename;\n  this.contentType = options.contentType;\n  this.knownLength = options.knownLength;\n};\n\nAttachment.prototype.getType = function () {\n  if (this.data) {\n    if (typeof this.data === 'string') {\n      return 'path';\n    }\n    else if (Buffer.isBuffer(this.data)) {\n      return 'buffer';\n    }\n    else if (isStream(this.data)) {\n      return 'stream';\n    }\n  }\n\n  return 'unknown';\n};","/home/travis/build/npmtest/node-npmtest-mailgun-js/mailgun-js/lib/request.js":"var https = require('https');\nvar http = require('http');\nvar proxy = require('proxy-agent');\nvar qs = require('querystring');\nvar fs = require('fs');\nvar Readable = require('stream').Readable;\nvar FormData = require('form-data');\nvar Attachment = require('./attachment');\nvar retry = require('async').retry;\nvar promisifyCall = require('promisify-call');\n\nvar debug = require('debug')('mailgun-js');\n\nfunction noop () {\n};\n\nfunction isOk(i) {\n  return typeof i !== 'undefined' && i !== null;\n}\n\nfunction Request(options) {\n  this.host = options.host;\n  this.protocol = options.protocol;\n  this.port = options.port;\n  this.endpoint = options.endpoint;\n  this.auth = options.auth;\n  this.proxy = options.proxy;\n  this.timeout = options.timeout;\n  this.retry = options.retry || 1;\n}\n\nRequest.prototype._request = function (method, resource, data, fn) {\n  var self = this;\n\n  var path = ''.concat(this.endpoint, resource);\n\n  var params = this.prepareData(data);\n\n  this.payload = '';\n\n  var isMIME = path.indexOf('/messages.mime') >= 0;\n\n  this.headers = {};\n  if (method === 'GET' || method === 'DELETE') {\n    this.payload = qs.stringify(params);\n    if (this.payload) path = path.concat('?', this.payload);\n  }\n  else {\n    this.headers['Content-Type'] = isMIME ? 'multipart/form-data' : 'application/x-www-form-urlencoded';\n\n    if (params && (params.attachment || params.inline || (isMIME && params.message))) {\n      this.prepareFormData(params);\n    }\n    else {\n      this.payload = qs.stringify(params);\n      var length = this.payload ? Buffer.byteLength(this.payload) : 0;\n      this.headers['Content-Length'] = length;\n    }\n  }\n\n  // check for MIME is true in case of messages GET\n  if (method === 'GET' &&\n    path.indexOf('/messages') >= 0 &&\n    params && params.MIME === true) {\n    this.headers.Accept = 'message/rfc2822';\n  }\n\n  debug('%s %s', method, path);\n\n  var opts = {\n    hostname: this.host,\n    port: this.port,\n    protocol: this.protocol,\n    path: path,\n    method: method,\n    headers: this.headers,\n    auth: this.auth,\n    agent: this.proxy ? proxy(this.proxy, true) : false,\n    timeout: this.timeout\n  };\n\n  if (this.retry > 1) {\n    retry(this.retry, function (retryCb) {\n      self.callback = retryCb;\n      self.performRequest(opts);\n    }, fn);\n  }\n  else {\n    this.callback = fn;\n    this.performRequest(opts);\n  }\n}\n\nRequest.prototype.request = function (method, resource, data, fn) {\n  if (typeof data === 'function' && !fn) {\n    fn = data;\n    data = {};\n  }\n\n  if (!data) {\n    data = {}\n  }\n\n  return promisifyCall(this, this._request, method, resource, data, fn);\n};\n\nfunction getDataValue(key, input) {\n  if (isSpecialParam(key) && (typeof input === 'object')) {\n    return JSON.stringify(input);\n  }\n  else if (typeof input === 'number' || typeof input === 'boolean') {\n    return input.toString();\n  }\n  else {\n    return input;\n  }\n}\n\nfunction isSpecialParam(paramKey) {\n  var key = paramKey.toLowerCase();\n  return ((key === 'vars' || key === 'members' || key === 'recipient-variables') || (key.indexOf('v:') === 0));\n}\n\nRequest.prototype.prepareData = function (data) {\n  var params = {};\n\n  for (var key in data) {\n    if (key !== 'attachment' && key !== 'inline' && isOk(data[key])) {\n      var value = getDataValue(key, data[key]);\n      if(isOk(value)) {\n        params[key] = value;\n      }\n    }\n    else {\n      params[key] = data[key];\n    }\n  }\n\n  return params;\n};\n\nRequest.prototype.prepareFormData = function (data) {\n  this.form = new FormData();\n  var self = this;\n\n  for (var key in data) {\n    var obj = data[key];\n    if(isOk(obj)) {\n      if (key === 'attachment' || key === 'inline') {\n        if (Array.isArray(obj)) {\n          for (var i = 0; i < obj.length; i++) {\n            this.handleAttachmentObject(key, obj[i]);\n          }\n        }\n        else {\n          this.handleAttachmentObject(key, obj);\n        }\n      }\n      else if (key === 'message') {\n        this.handleMimeObject(key, obj);\n      }\n      else if (Array.isArray(obj)) {\n        function appendKey(element) {\n          if(isOk(element)) {\n            var value = getDataValue(key, element);\n            if(isOk(value)) {\n              self.form.append(key, value);\n            }\n          }\n        }\n\n        obj.forEach(appendKey);\n      }\n      else {\n        var value = getDataValue(key, obj);\n        if(isOk(value)) {\n          this.form.append(key, value);\n        }\n      }\n    }\n  }\n\n  this.headers = this.form.getHeaders();\n};\n\nRequest.prototype.handleMimeObject = function (key, obj) {\n  var self = this;\n  if (typeof obj === 'string') {\n    if (fs.existsSync(obj) && fs.statSync(obj).isFile()) {\n      self.form.append('message', fs.createReadStream(obj));\n    }\n    else {\n      self.form.append('message', new Buffer(obj), {\n        filename: 'message.mime',\n        contentType: 'message/rfc822',\n        knownLength: obj.length\n      });\n    }\n  }\n  else if (obj instanceof Readable) {\n    self.form.append('message', obj);\n  }\n};\n\nRequest.prototype.handleAttachmentObject = function (key, obj) {\n  if (!this.form) this.form = new FormData();\n\n  if (Buffer.isBuffer(obj)) {\n    debug('appending buffer to form data. key: %s', key);\n    this.form.append(key, obj, {\n      filename: 'file'\n    });\n  }\n  else if (typeof obj === 'string') {\n    debug('appending stream to form data. key: %s obj: %s', key, obj);\n    this.form.append(key, fs.createReadStream(obj));\n  } else if ((typeof obj === 'object') && (obj.readable === true)) {\n    debug('appending readable stream to form data. key: %s obj: %s', key, obj);\n    this.form.append(key, obj);\n  } else if ((typeof obj === 'object') && (obj instanceof Attachment)) {\n    var attachmentType = obj.getType();\n    if (attachmentType === 'path') {\n      debug('appending attachment stream to form data. key: %s data: %s filename: %s', key, obj.data, obj.filename);\n      this.form.append(key, fs.createReadStream(obj.data), {\n        filename: obj.filename || 'attached file'\n      });\n    }\n    else if (attachmentType === 'buffer') {\n      debug('appending attachment buffer to form data. key: %s filename: %s', key, obj.filename);\n      var formOpts = {\n        filename: obj.filename || 'attached file'\n      };\n\n      if (obj.contentType) {\n        formOpts.contentType = obj.contentType\n      }\n\n      if (obj.knownLength) {\n        formOpts.knownLength = obj.knownLength\n      }\n\n      this.form.append(key, obj.data, formOpts);\n    }\n    else if (attachmentType === 'stream') {\n      if (obj.knownLength && obj.contentType) {\n        debug('appending attachment stream to form data. key: %s filename: %s', key, obj.filename);\n\n        this.form.append(key, obj.data, {\n          filename: obj.filename || 'attached file',\n          contentType: obj.contentType,\n          knownLength: obj.knownLength\n        });\n      }\n      else {\n        debug('missing content type or length for attachment stream. key: %s', key);\n      }\n    }\n  }\n  else {\n    debug('unknown attachment type. key: %s', key);\n  }\n};\n\nRequest.prototype.handleResponse = function (res) {\n  var self = this;\n  var chunks = '';\n  var error;\n\n  res.on('data', function (chunk) {\n    chunks += chunk;\n  });\n\n  res.on('error', function (err) {\n    error = err;\n  });\n\n  res.on('end', function () {\n    var body;\n\n    debug('response status code: %s content type: %s error: %s', res.statusCode, res.headers['content-type'], error);\n\n    // FIXME: An ugly hack to overcome invalid response type in mailgun api (see http://bit.ly/1eF30fU).\n    // We skip content-type validation for 'campaings' endpoint assuming it is JSON.\n    var skipContentTypeCheck = res.req && res.req.path && res.req.path.match(/\\/campaigns/);\n    var isJSON = res.headers['content-type'] && res.headers['content-type'].indexOf('application/json') >= 0;\n    if (chunks && !error && (skipContentTypeCheck || isJSON)) {\n      try {\n        body = JSON.parse(chunks);\n      } catch (e) {\n        error = e;\n      }\n    }\n\n    if (process.env.DEBUG_MAILGUN_FORCE_RETRY) {\n      error = new Error('Force retry error');\n      delete process.env.DEBUG_MAILGUN_FORCE_RETRY;\n    }\n\n    if (!error && res.statusCode !== 200) {\n      var msg = body ? body.message || body.response : body || chunks || res.statusMessage;\n      error = new Error(msg);\n      error.statusCode = res.statusCode;\n    }\n\n    return self.callback(error, body);\n  });\n};\n\nRequest.prototype.performRequest = function (options) {\n  var self = this;\n  var method = options.method;\n\n  if (this.form && (method === 'POST' || method === 'PUT' || method === 'PATCH')) {\n\n    this.form.submit(options, function (err, res) {\n      if (err) {\n        return self.callback(err);\n      }\n\n      return self.handleResponse(res);\n    });\n  }\n  else {\n    var req;\n\n    if (options.protocol === 'http:') {\n      req = http.request(options, function (res) {\n        return self.handleResponse(res);\n      });\n    }\n    else {\n      req = https.request(options, function (res) {\n        return self.handleResponse(res);\n      });\n    }\n\n    if (options.timeout) {\n      req.setTimeout(options.timeout, function () {\n        // timeout occurs\n        req.abort();\n      });\n    }\n\n    req.on('error', function (e) {\n      return self.callback(e);\n    });\n\n    if (this.payload && (method === 'POST' || method === 'PUT' || method === 'PATCH')) {\n      req.write(this.payload);\n    }\n\n    req.end();\n  }\n};\n\nmodule.exports = Request;\n","/home/travis/build/npmtest/node-npmtest-mailgun-js/mailgun-js/lib/build.js":"var inflection = require('inflection');\nvar pathProxy = require('path-proxy');\nvar promisifyCall = require('promisify-call');\n\nvar noop = function () {\n};\n\nvar Builder = function (baseObj, resources) {\n  this.baseObj = baseObj;\n  this.resources = resources;\n};\n\nBuilder.prototype.build = function () {\n  var self = this;\n  Object.keys(this.resources).forEach(function (key) {\n    //console.log('building ' + key);\n    self.buildResource(self.resources[key]);\n  });\n};\n\nBuilder.prototype.buildResource = function (resource) {\n  resource.links.forEach(this.buildAction, this);\n};\n\nBuilder.prototype.buildAction = function (action) {\n  var actionName = action.title;\n  var properties = action.properties;\n  var requiredProps = action.required;\n\n  // HACKY special case for members bulk add and send MIME endpoints\n  var path = action.href.replace(/\\.json/gi, '').replace(/\\.mime/gi, '');\n  var constructor = pathProxy.pathProxy(this.baseObj, path);\n\n  function impl (data, fn) {\n    var requestPath = action.href;\n    var pathParams = action.href.match(/{[^}]+}/g) || [];\n\n    if (typeof data === 'function') {\n      fn = data;\n      data = undefined;\n    }\n\n    var err;\n\n    if (this.params.length !== pathParams.length) {\n      err = new Error('Invalid number of params in path (expected ' + pathParams.length + ', got ' + this.params.length + ').');\n      return fn(err);\n    }\n\n    this.params.forEach(function (param) {\n      requestPath = requestPath.replace(/{[^}]+}/, param);\n    });\n\n    // check required payload properties\n    if (requiredProps && requiredProps.length > 0) {\n      if (!data) {\n        err = new Error('Missing parameters.');\n      }\n      else {\n        for (var i = 0; i < requiredProps.length; i++) {\n          var prop = requiredProps[i];\n          if (typeof data[prop] === 'undefined') {\n            err = new Error('Missing parameter \\'' + prop + '\\'');\n            break;\n          }\n        }\n      }\n    }\n\n    if (err) {\n      return fn(err);\n    }\n\n    // check payload property types\n    for (var key in properties) {\n      if (data && data[key]) {\n        var type = properties[key].type;\n        var dataType = Array.isArray(data[key]) ? 'array' : typeof data[key];\n        if (Array.isArray(type)) {\n          if (type.indexOf(dataType) === -1) {\n            err = new Error('Invalid parameter type. ' + key + ' must be of type: ' + type + '.');\n            break;\n          }\n        }\n        else if (dataType !== type) {\n          err = new Error('Invalid parameter type. ' + key + ' must be of type: ' + type + '.');\n          break;\n        }\n      }\n    }\n\n    if (err) {\n      return fn(err);\n    }\n\n    this.client = this.base;\n    return this.client.request(action.method, requestPath, data, fn);\n  }\n\n  constructor.prototype[getName(actionName)] = function (data, fn) {\n    return promisifyCall(this, impl, data, fn);\n  };\n};\n\nfunction getName(name) {\n  name = name.toLowerCase();\n  name = inflection.dasherize(name).replace(/-/g, '_');\n  name = inflection.camelize(name, true);\n\n  return name;\n}\n\nexports.build = function (baseObj, resources) {\n  var b = new Builder(baseObj, resources);\n  b.build();\n};\n","/home/travis/build/npmtest/node-npmtest-mailgun-js/mailgun-js/lib/schema.js":"module.exports = {\n  \"definitions\": {\n    \"message\": {\n      \"description\": \"This API allows you to send, access, and delete mesages programmatically.\",\n      \"links\": [\n        {\n          \"description\": \"Returns a single message in JSON format. To get full MIME message set MIME to true\",\n          \"href\": \"/messages/{message}\",\n          \"method\": \"GET\",\n          \"title\": \"info\",\n          \"properties\": {\n            \"MIME\": {\n              \"type\": \"boolean\"\n            }\n          }\n        },\n        {\n          \"description\": \"Sends a message by assembling it from the components.\",\n          \"href\": \"/messages\",\n          \"method\": \"POST\",\n          \"title\": \"send\",\n          \"properties\": {\n            \"from\": {\n              \"type\": \"string\"\n            }\n          },\n          \"required\": [\"from\"]\n        },\n        {\n          \"description\": \"Sends a message in MIME format.\",\n          \"href\": \"/messages.mime\",\n          \"method\": \"POST\",\n          \"title\": \"send-mime\",\n          \"properties\": {\n            \"message\": {\n              \"type\": [\"string\", \"object\"]\n            }\n          }\n        },\n        {\n          \"description\": \"To delete an inbound message that has been stored via the store() action.\",\n          \"href\": \"/messages/{message}\",\n          \"method\": \"DELETE\",\n          \"title\": \"delete\"\n        }\n      ]\n    },\n    \"domain\": {\n      \"description\": \"This API allows you to create, access, and validate domains programmatically.\",\n      \"links\": [\n        {\n          \"description\": \"Returns a list of domains under your account in JSON.\",\n          \"href\": \"/domains\",\n          \"method\": \"GET\",\n          \"title\": \"list\",\n          \"properties\": {\n            \"limit\": {\n              \"type\": \"number\"\n            },\n            \"skip\": {\n              \"type\": \"number\"\n            }\n          }\n        },\n        {\n          \"description\": \"Returns a single domain, including credentials and DNS records.\",\n          \"href\": \"/domains/{domain}\",\n          \"method\": \"GET\",\n          \"title\": \"info\"\n        },\n        {\n          \"description\": \"Create a new domain.\",\n          \"href\": \"/domains\",\n          \"method\": \"POST\",\n          \"title\": \"create\",\n          \"properties\": {\n            \"name\": {\n              \"type\": \"string\"\n            },\n            \"smtp_password\": {\n              \"type\": \"string\"\n            },\n            \"wildcard\": {\n              \"type\": \"boolean\"\n            }\n          },\n          \"required\": [\"name\", \"smtp_password\"]\n        },\n        {\n          \"description\": \"Delete a domain from your account.\",\n          \"href\": \"/domains/{domain}\",\n          \"method\": \"DELETE\",\n          \"title\": \"delete\"\n        }\n      ]\n    },\n    \"credentials\": {\n      \"description\": \"Programmatically get and modify domain credentials.\",\n      \"links\": [\n        {\n          \"description\": \"Returns a list of SMTP credentials for the defined domain.\",\n          \"href\": \"/domains/{domain}/credentials\",\n          \"method\": \"GET\",\n          \"title\": \"list\",\n          \"properties\": {\n            \"limit\": {\n              \"type\": \"number\"\n            },\n            \"skip\": {\n              \"type\": \"number\"\n            }\n          }\n        },\n        {\n          \"description\": \"Creates a new set of SMTP credentials for the defined domain.\",\n          \"href\": \"/domains/{domain}/credentials\",\n          \"method\": \"POST\",\n          \"title\": \"create\",\n          \"properties\": {\n            \"login\": {\n              \"type\": \"string\"\n            },\n            \"password\": {\n              \"type\": \"string\"\n            }\n          },\n          \"required\": [\"login\", \"password\"]\n        },\n        {\n          \"description\": \"Updates the specified SMTP credentials. Currently only the password can be changed.\",\n          \"href\": \"/domains/{domain}/credentials/{login}\",\n          \"method\": \"PUT\",\n          \"title\": \"update\",\n          \"properties\": {\n            \"password\": {\n              \"type\": \"string\"\n            }\n          },\n          \"required\": [\"password\"]\n        },\n        {\n          \"description\": \"Deletes the defined SMTP credentials.\",\n          \"href\": \"/domains/{domain}/credentials/{login}\",\n          \"method\": \"DELETE\",\n          \"title\": \"delete\"\n        }\n      ]\n    },\n    \"complaints\": {\n      \"description\": \"This API allows you to programmatically download the list of users who have complained, add a complaint, or delete a complaint.\",\n      \"links\": [\n        {\n          \"description\": \"Fetches the list of complaints.\",\n          \"href\": \"/complaints\",\n          \"method\": \"GET\",\n          \"title\": \"list\",\n          \"properties\": {\n            \"limit\": {\n              \"type\": \"number\"\n            },\n            \"skip\": {\n              \"type\": \"number\"\n            }\n          }\n        },\n        {\n          \"description\": \"Adds an address to the complaints table.\",\n          \"href\": \"/complaints\",\n          \"method\": \"POST\",\n          \"title\": \"create\",\n          \"properties\": {\n            \"address\": {\n              \"type\": \"string\"\n            }\n          },\n          \"required\": [\"address\"]\n        },\n        {\n          \"description\": \"Fetches a single spam complaint by a given email address.\",\n          \"href\": \"/complaints/{address}\",\n          \"method\": \"GET\",\n          \"title\": \"info\"\n        },\n        {\n          \"description\": \"Removes a given spam complaint.\",\n          \"href\": \"/complaints/{address}\",\n          \"method\": \"DELETE\",\n          \"title\": \"delete\"\n        }\n      ]\n    },\n    \"unsubscribes\": {\n      \"description\": \"This API allows you to programmatically download the list of recipients who have unsubscribed from your emails. You can also programmatically “clear” the unsubscribe event.\",\n      \"links\": [\n        {\n          \"description\": \"Fetches the list of unsubscribes.\",\n          \"href\": \"/unsubscribes\",\n          \"method\": \"GET\",\n          \"title\": \"list\",\n          \"properties\": {\n            \"limit\": {\n              \"type\": \"number\"\n            },\n            \"skip\": {\n              \"type\": \"number\"\n            }\n          }\n        },\n        {\n          \"description\": \"Retreives a single unsubscribe record.\",\n          \"href\": \"/unsubscribes/{address}\",\n          \"method\": \"GET\",\n          \"title\": \"info\"\n        },\n        {\n          \"description\": \"Removes an address from the unsubscribes table.\",\n          \"href\": \"/unsubscribes/{address}\",\n          \"method\": \"DELETE\",\n          \"title\": \"delete\"\n        },\n        {\n          \"description\": \"Adds address to unsubscribed table.\",\n          \"href\": \"/unsubscribes\",\n          \"method\": \"POST\",\n          \"title\": \"create\",\n          \"properties\": {\n            \"address\": {\n              \"type\": \"string\"\n            },\n            \"tag\": {\n              \"type\": \"string\"\n            }\n          },\n          \"required\": [\"address\", \"tag\"]\n        }\n      ]\n    },\n    \"bounces\": {\n      \"description\": \"Mailgun automatically handles bounced emails. The list of bounced addresses can be accessed programmatically.\",\n      \"links\": [\n        {\n          \"description\": \"Fetches the list of bounces.\",\n          \"href\": \"/bounces\",\n          \"method\": \"GET\",\n          \"title\": \"list\",\n          \"properties\": {\n            \"limit\": {\n              \"type\": \"number\"\n            },\n            \"skip\": {\n              \"type\": \"number\"\n            }\n          }\n        },\n        {\n          \"description\": \"Fetches a single bounce event by a given email address.\",\n          \"href\": \"/bounces/{address}\",\n          \"method\": \"GET\",\n          \"title\": \"info\"\n        },\n        {\n          \"description\": \"Clears a given bounce event.\",\n          \"href\": \"/bounces/{address}\",\n          \"method\": \"DELETE\",\n          \"title\": \"delete\"\n        },\n        {\n          \"description\": \"Adds a permanent bounce to the bounces table. Updates the existing record if already here.\",\n          \"href\": \"/bounces\",\n          \"method\": \"POST\",\n          \"title\": \"create\",\n          \"properties\": {\n            \"address\": {\n              \"type\": \"string\"\n            },\n            \"code\": {\n              \"type\": \"number\"\n            },\n            \"error\": {\n              \"type\": \"string\"\n            }\n          },\n          \"required\": [\"address\"]\n        }\n      ]\n    },\n    \"routes\": {\n      \"description\": \"Mailgun Routes are a powerful way to handle the incoming traffic. This API allows you to work with routes programmatically.\",\n      \"links\": [\n        {\n          \"description\": \"Fetches the list of routes.\",\n          \"href\": \"/routes\",\n          \"method\": \"GET\",\n          \"title\": \"list\",\n          \"properties\": {\n            \"limit\": {\n              \"type\": \"number\"\n            },\n            \"skip\": {\n              \"type\": \"number\"\n            }\n          }\n        },\n        {\n          \"description\": \"Returns a single route object based on its ID.\",\n          \"href\": \"/routes/{id}\",\n          \"method\": \"GET\",\n          \"title\": \"info\"\n        },\n        {\n          \"description\": \"Creates a new route.\",\n          \"href\": \"/routes\",\n          \"method\": \"POST\",\n          \"title\": \"create\",\n          \"properties\": {\n            \"limit\": {\n              \"priority\": \"number\"\n            },\n            \"description\": {\n              \"type\": \"string\"\n            },\n            \"expression\": {\n              \"type\": \"string\"\n            }\n          },\n          \"required\": [\"expression\"]\n        },\n        {\n          \"description\": \"Updates a given route by ID.\",\n          \"href\": \"/routes/{id}\",\n          \"method\": \"PUT\",\n          \"title\": \"update\",\n          \"properties\": {\n            \"limit\": {\n              \"priority\": \"number\"\n            },\n            \"description\": {\n              \"type\": \"string\"\n            },\n            \"expression\": {\n              \"type\": \"string\"\n            }\n          }\n        },\n        {\n          \"description\": \"Deletes a route based on the id.\",\n          \"href\": \"/routes/{id}\",\n          \"method\": \"DELETE\",\n          \"title\": \"delete\"\n        }\n      ]\n    },\n    \"list\": {\n      \"description\": \"You can programmatically work with mailing lists and mailing list memebers using Mailgun Mailing List API.\",\n      \"links\": [\n        {\n          \"description\": \"Returns a list of mailing lists under your account.\",\n          \"href\": \"/lists\",\n          \"method\": \"GET\",\n          \"title\": \"list\",\n          \"properties\": {\n            \"address\": {\n              \"type\": \"string\"\n            },\n            \"limit\": {\n              \"type\": \"number\"\n            },\n            \"skip\": {\n              \"type\": \"number\"\n            }\n          }\n        },\n        {\n          \"description\": \"Returns a single mailing list by a given address.\",\n          \"href\": \"/lists/{address}\",\n          \"method\": \"GET\",\n          \"title\": \"info\"\n        },\n        {\n          \"description\": \"Creates a new mailing list.\",\n          \"href\": \"/lists\",\n          \"method\": \"POST\",\n          \"title\": \"create\",\n          \"properties\": {\n            \"address\": {\n              \"type\": \"string\"\n            },\n            \"name\": {\n              \"type\": \"string\"\n            },\n            \"description\": {\n              \"type\": \"string\"\n            },\n            \"access_level\": {\n              \"type\": \"string\"\n            }\n          },\n          \"required\": [\"address\"]\n        },\n        {\n          \"description\": \"Update mailing list properties, such as address, description or name.\",\n          \"href\": \"/lists/{address}\",\n          \"method\": \"PUT\",\n          \"title\": \"update\",\n          \"properties\": {\n            \"address\": {\n              \"type\": \"string\"\n            },\n            \"name\": {\n              \"type\": \"string\"\n            },\n            \"description\": {\n              \"type\": \"string\"\n            },\n            \"access_level\": {\n              \"type\": \"string\"\n            }\n          }\n        },\n        {\n          \"description\": \"Deletes a mailing list.\",\n          \"href\": \"/lists/{address}\",\n          \"method\": \"DELETE\",\n          \"title\": \"delete\"\n        }\n      ]\n    },\n    \"members\": {\n      \"description\": \"Programatically work with mailing lists members.\",\n      \"links\": [\n        {\n          \"description\": \"Fetches the list of mailing list members.\",\n          \"href\": \"/lists/{address}/members\",\n          \"method\": \"GET\",\n          \"title\": \"list\",\n          \"properties\": {\n            \"subscribed\": {\n              \"type\": \"boolean\"\n            },\n            \"limit\": {\n              \"type\": \"number\"\n            },\n            \"skip\": {\n              \"type\": \"number\"\n            }\n          }\n        },\n        {\n          \"description\": \"Paginate over list members in the given mailing list\",\n          \"href\": \"/lists/{address}/members/pages\",\n          \"method\": \"GET\",\n          \"title\": \"page\",\n          \"properties\": {\n            \"subscribed\": {\n              \"type\": \"boolean\"\n            },\n            \"limit\": {\n              \"type\": \"number\"\n            },\n            \"page\": {\n              \"type\": \"string\"\n            },\n            \"address\": {\n              \"type\": \"string\"\n            }\n          }\n        },\n        {\n          \"description\": \"Retrieves a mailing list member.\",\n          \"href\": \"/lists/{address}/members/{member_address}\",\n          \"method\": \"GET\",\n          \"title\": \"info\"\n        },\n        {\n          \"description\": \"Adds a member to the mailing list.\",\n          \"href\": \"/lists/{address}/members\",\n          \"method\": \"POST\",\n          \"title\": \"create\",\n          \"properties\": {\n            \"address\": {\n              \"type\": \"string\"\n            },\n            \"name\": {\n              \"type\": \"string\"\n            },\n            \"vars\": {\n              \"type\": \"object\"\n            },\n            \"subscribed\": {\n              \"type\": \"boolean\"\n            },\n            \"upsert\": {\n              \"type\": \"string\"\n            }\n          },\n          \"required\": [\"address\"]\n        },\n        {\n          \"description\": \"Adds multiple members, up to 1,000 per call, to a Mailing List.\",\n          \"href\": \"/lists/{address}/members.json\",\n          \"method\": \"POST\",\n          \"title\": \"add\",\n          \"properties\": {\n            \"members\": {\n              \"type\": \"array\"\n            },\n            \"upsert\": {\n              \"type\": \"boolean\"\n            }\n          },\n          \"required\": [\"members\"]\n        },\n        {\n          \"description\": \"Updates a mailing list member with given properties.\",\n          \"href\": \"/lists/{address}/members/{member_address}\",\n          \"method\": \"PUT\",\n          \"title\": \"update\",\n          \"properties\": {\n            \"address\": {\n              \"type\": \"string\"\n            },\n            \"name\": {\n              \"type\": \"string\"\n            },\n            \"vars\": {\n              \"type\": \"object\"\n            },\n            \"subscribed\": {\n              \"type\": \"string\"\n            }\n          }\n        },\n        {\n          \"description\": \"Delete a mailing list member.\",\n          \"href\": \"/lists/{address}/members/{member_address}\",\n          \"method\": \"DELETE\",\n          \"title\": \"delete\"\n        }\n      ]\n    },\n    \"campaign\": {\n      \"description\": \"Manage campaigns. See http://documentation.mailgun.com/api-campaigns.html\",\n      \"links\": [\n        {\n          \"description\": \"Create a new campaign.\",\n          \"href\": \"/campaigns\",\n          \"method\": \"POST\",\n          \"title\": \"create\",\n          \"properties\": {\n            \"id\": {\n              \"type\": \"string\"\n            },\n            \"name\": {\n              \"type\": \"string\"\n            }\n          },\n          \"required\": [\"name\"]\n        },\n        {\n          \"description\": \"Returns a list of campaigns.\",\n          \"href\": \"/campaigns\",\n          \"method\": \"GET\",\n          \"title\": \"list\",\n          \"properties\": {\n            \"limit\": {\n              \"type\": \"number\"\n            },\n            \"skip\": {\n              \"type\": \"number\"\n            }\n          }\n        },\n        {\n          \"description\": \"Get single campaign info.\",\n          \"href\": \"/campaigns/{id}\",\n          \"method\": \"GET\",\n          \"title\": \"info\"\n        },\n        {\n          \"description\": \"Update campaign.\",\n          \"href\": \"/campaigns/{id}\",\n          \"method\": \"PUT\",\n          \"title\": \"update\",\n          \"properties\": {\n            \"id\": {\n              \"type\": \"string\"\n            },\n            \"name\": {\n              \"type\": \"string\"\n            }\n          }\n        },\n        {\n          \"description\": \"Delete campaign.\",\n          \"href\": \"/campaigns/{id}\",\n          \"method\": \"DELETE\",\n          \"title\": \"delete\"\n        }\n      ]\n    },\n    \"stats\": {\n      \"description\": \"Various data and event statistics for you mailgun account. See http://documentation.mailgun.com/api-stats.html\",\n      \"links\": [\n        {\n          \"description\": \"Returns a list of event stat items. Each record represents counts for one event per one day.\",\n          \"href\": \"/stats\",\n          \"method\": \"GET\",\n          \"title\": \"list\",\n          \"properties\": {\n            \"limit\": {\n              \"type\": \"number\"\n            },\n            \"skip\": {\n              \"type\": \"number\"\n            },\n            \"start-date\": {\n              \"type\": \"string\"\n            }\n          }\n        }\n      ]\n    },\n    \"tags\": {\n      \"description\": \"Deletes all counters for particular tag and the tag itself. See http://documentation.mailgun.com/api-stats.html\",\n      \"links\": [\n        {\n          \"description\": \"Deletes all counters for particular tag and the tag itself.\",\n          \"href\": \"/tags/{tag}\",\n          \"method\": \"DELETE\",\n          \"title\": \"delete\"\n        }\n      ]\n    },\n    \"events\": {\n      \"description\": \"Query events that happen to your emails. See http://documentation.mailgun.com/api-events.html\",\n      \"links\": [\n        {\n          \"description\": \"Queries event records.\",\n          \"href\": \"/events\",\n          \"method\": \"GET\",\n          \"title\": \"get\",\n          \"properties\": {\n            \"begin\": {\n              \"type\": \"string\"\n            },\n            \"end\": {\n              \"type\": \"string\"\n            },\n            \"ascending\": {\n              \"type\": \"string\"\n            },\n            \"limit\": {\n              \"type\": \"number\"\n            },\n            \"pretty\": {\n              \"type\": \"string\"\n            }\n          }\n        }\n      ]\n    }\n  }\n};\n"}